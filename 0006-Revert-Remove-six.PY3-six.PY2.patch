From a049d5d53f013c5b6c514e9f68266111d383402a Mon Sep 17 00:00:00 2001
From: Martin Kopec <xkopec42@gmail.com>
Date: Thu, 22 Apr 2021 10:12:09 +0000
Subject: [PATCH] Revert "Remove six.PY3/six.PY2"

This reverts commit 7d91c87345b1f18b19202ba7d447ab49d8f721e7.
---
 tempest/api/compute/servers/test_novnc.py | 11 ++++++++---
 tempest/cmd/run.py                        |  7 ++++++-
 tempest/common/compute.py                 | 12 +++++++++---
 tempest/lib/cli/base.py                   |  8 +++++++-
 tempest/lib/common/thread.py              | 13 ++++++++++---
 tempest/tests/cmd/test_run.py             |  7 ++++++-
 6 files changed, 46 insertions(+), 12 deletions(-)

diff --git a/tempest/api/compute/servers/test_novnc.py b/tempest/api/compute/servers/test_novnc.py
index 6ebdbdb08..7931ca978 100644
--- a/tempest/api/compute/servers/test_novnc.py
+++ b/tempest/api/compute/servers/test_novnc.py
@@ -26,6 +26,11 @@ from tempest.lib import decorators
 
 CONF = config.CONF
 
+if six.PY2:
+    ord_func = ord
+else:
+    ord_func = int
+
 
 class NoVNCConsoleTestJSON(base.BaseV2ComputeTest):
     """Test novnc console"""
@@ -111,14 +116,14 @@ class NoVNCConsoleTestJSON(base.BaseV2ComputeTest):
             # single word(4 bytes).
             self.assertEqual(
                 data_length, 4, 'Expected authentication type None.')
-            self.assertIn(1, [int(data[i]) for i in (0, 3)],
+            self.assertIn(1, [ord_func(data[i]) for i in (0, 3)],
                           'Expected authentication type None.')
         else:
             self.assertGreaterEqual(
                 len(data), 2, 'Expected authentication type None.')
             self.assertIn(
                 1,
-                [int(data[i + 1]) for i in range(int(data[0]))],
+                [ord_func(data[i + 1]) for i in range(ord_func(data[0]))],
                 'Expected authentication type None.')
             # Send to the server that we only support authentication
             # type None
@@ -131,7 +136,7 @@ class NoVNCConsoleTestJSON(base.BaseV2ComputeTest):
                 len(data), 4,
                 'Server did not think security was successful.')
             self.assertEqual(
-                [int(i) for i in data], [0, 0, 0, 0],
+                [ord_func(i) for i in data], [0, 0, 0, 0],
                 'Server did not think security was successful.')
 
         # Say to leave the desktop as shared as part of client initialization
diff --git a/tempest/cmd/run.py b/tempest/cmd/run.py
index 2669ff774..ae1bdb3e9 100644
--- a/tempest/cmd/run.py
+++ b/tempest/cmd/run.py
@@ -130,6 +130,7 @@ import sys
 from cliff import command
 from oslo_log import log
 from oslo_serialization import jsonutils as json
+import six
 from stestr import commands
 
 from tempest import clients
@@ -139,6 +140,10 @@ from tempest.cmd import workspace
 from tempest.common import credentials_factory as credentials
 from tempest import config
 
+if six.PY2:
+    # Python 2 has not FileNotFoundError exception
+    FileNotFoundError = IOError
+
 CONF = config.CONF
 SAVED_STATE_JSON = "saved_state.json"
 
@@ -165,7 +170,7 @@ class TempestRun(command.Command):
         # environment variable and fall back to "python", under python3
         # if it does not exist. we should set it to the python3 executable
         # to deal with this situation better for now.
-        if 'PYTHON' not in os.environ:
+        if six.PY3 and 'PYTHON' not in os.environ:
             os.environ['PYTHON'] = sys.executable
 
     def _create_stestr_conf(self):
diff --git a/tempest/common/compute.py b/tempest/common/compute.py
index 42f68f1d8..da3a4a9dd 100644
--- a/tempest/common/compute.py
+++ b/tempest/common/compute.py
@@ -19,6 +19,7 @@ import ssl
 import struct
 import textwrap
 
+import six
 from six.moves.urllib import parse as urlparse
 
 from oslo_log import log as logging
@@ -30,6 +31,11 @@ from tempest.lib.common import fixed_network
 from tempest.lib.common import rest_client
 from tempest.lib.common.utils import data_utils
 
+if six.PY2:
+    ord_func = ord
+else:
+    ord_func = int
+
 CONF = config.CONF
 
 LOG = logging.getLogger(__name__)
@@ -365,8 +371,8 @@ class _WebSocket(object):
             # frames less than 125 bytes here (for the negotiation) and
             # that only the 2nd byte contains the length, and since the
             # server doesn't do masking, we can just read the data length
-            if int(header[1]) & 127 > 0:
-                return self._recv(int(header[1]) & 127)
+            if ord_func(header[1]) & 127 > 0:
+                return self._recv(ord_func(header[1]) & 127)
 
     def send_frame(self, data):
         """Wrapper for sending data to add in the WebSocket frame format."""
@@ -383,7 +389,7 @@ class _WebSocket(object):
             frame_bytes.append(mask[i])
         # Mask each of the actual data bytes that we are going to send
         for i in range(len(data)):
-            frame_bytes.append(int(data[i]) ^ mask[i % 4])
+            frame_bytes.append(ord_func(data[i]) ^ mask[i % 4])
         # Convert our integer list to a binary array of bytes
         frame_bytes = struct.pack('!%iB' % len(frame_bytes), * frame_bytes)
         self._socket.sendall(frame_bytes)
diff --git a/tempest/lib/cli/base.py b/tempest/lib/cli/base.py
index c661d21cd..d8c776b0b 100644
--- a/tempest/lib/cli/base.py
+++ b/tempest/lib/cli/base.py
@@ -18,6 +18,7 @@ import shlex
 import subprocess
 
 from oslo_log import log as logging
+import six
 
 from tempest.lib import base
 import tempest.lib.cli.output_parser
@@ -54,6 +55,8 @@ def execute(cmd, action, flags='', params='', fail_ok=False,
                     flags, action, params])
     cmd = cmd.strip()
     LOG.info("running: '%s'", cmd)
+    if six.PY2:
+        cmd = cmd.encode('utf-8')
     cmd = shlex.split(cmd)
     stdout = subprocess.PIPE
     stderr = subprocess.STDOUT if merge_stderr else subprocess.PIPE
@@ -64,7 +67,10 @@ def execute(cmd, action, flags='', params='', fail_ok=False,
                                        cmd,
                                        result,
                                        result_err)
-    return os.fsdecode(result)
+    if six.PY2:
+        return result
+    else:
+        return os.fsdecode(result)
 
 
 class CLIClient(object):
diff --git a/tempest/lib/common/thread.py b/tempest/lib/common/thread.py
index ef0ec7367..b47d40dcf 100644
--- a/tempest/lib/common/thread.py
+++ b/tempest/lib/common/thread.py
@@ -13,6 +13,13 @@
 #    License for the specific language governing permissions and limitations
 #    under the License.
 
-# On Python3 thread module has been deprecated and get_ident has been moved
-# to threading module
-from threading import get_ident  # noqa: F401
+import six
+
+if six.PY2:
+    # module thread is removed in Python 3
+    from thread import get_ident  # noqa: H237,F401
+
+else:
+    # On Python3 thread module has been deprecated and get_ident has been moved
+    # to threading module
+    from threading import get_ident  # noqa: F401
diff --git a/tempest/tests/cmd/test_run.py b/tempest/tests/cmd/test_run.py
index ec7b76092..ce418e463 100644
--- a/tempest/tests/cmd/test_run.py
+++ b/tempest/tests/cmd/test_run.py
@@ -29,6 +29,10 @@ from tempest import config
 from tempest.lib.common.utils import data_utils
 from tempest.tests import base
 
+if six.PY2:
+    # Python 2 has not FileNotFoundError exception
+    FileNotFoundError = IOError
+
 DEVNULL = open(os.devnull, 'wb')
 atexit.register(DEVNULL.close)
 
@@ -162,7 +166,8 @@ class TestRunReturnCode(base.TestCase):
         ]
         # NOTE(mtreinish): on python 3 the subprocess prints b'' around
         # stdout.
-        result = ["b\'" + x + "\'" for x in result]
+        if six.PY3:
+            result = ["b\'" + x + "\'" for x in result]
         self.assertEqual(result, tests)
 
     def test_tempest_run_with_worker_file(self):
-- 
2.27.0

